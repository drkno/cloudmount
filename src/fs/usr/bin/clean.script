unionfs_fuse = '/config/local-media'
hidden_files = self.__files()
hidden_folders = self.__folders()
rclone_binary_path = '/usr/bin/rclone'
rclone_config_path = '/config/rclone.conf'

function clean_remote() {
    name="$1"
    remote="$2"
    
    delete_success = 0
    delete_failed = 0

    try:
        rclone = RcloneUploader(name, remote, self.rclone_binary_path, self.rclone_config_path, self.dry_run)
        # clean hidden files from remote using threadpool
        if self.hidden_files:
            with concurrent.futures.ThreadPoolExecutor(max_workers=16) as executor:
                log.info("Cleaning %d hidden file(s) from remote: %s", len(self.hidden_files), name)
                future_to_remote_file = {}
                for hidden_file in self.hidden_files:
                    remote_file = self.__hidden2remote(remote, hidden_file)
                    if remote_file:
                        future_to_remote_file[executor.submit(rclone.delete_file, remote_file)] = remote_file
                    else:
                        log.error("Failed mapping file '%s' to a remote file", hidden_file)
                        delete_failed += 1

                for future in concurrent.futures.as_completed(future_to_remote_file):
                    remote_file = future_to_remote_file[future]
                    try:
                        if future.result():
                            log.info("Removed file '%s'", remote_file)
                            delete_success += 1
                        else:
                            log.error("Failed removing file '%s'", remote_file)
                            delete_failed += 1
                    except Exception:
                        log.exception("Exception processing result from rclone delete file future for '%s': ",
                                        remote_file)
                        delete_failed += 1

        # clean hidden folders from remote
        if self.hidden_folders:
            log.info("Cleaning %d hidden folder(s) from remote: %s", len(self.hidden_folders), name)
            for hidden_folder in self.hidden_folders:
                remote_folder = self.__hidden2remote(remote, hidden_folder)
                if remote_folder and rclone.delete_folder(remote_folder):
                    log.info("Removed folder '%s'", remote_folder)
                    delete_success += 1
                else:
                    log.error("Failed removing folder '%s'", remote_folder)
                    delete_failed += 1

        if self.hidden_folders or self.hidden_files:
            log.info("Completed cleaning hidden(s) from remote: %s", name)
            log.info("%d items were deleted, %d items failed to delete", delete_success, delete_failed)

        return True, delete_success, delete_failed

    except Exception:
        log.exception("Exception cleaning hidden(s) from %r: ", self.unionfs_fuse)

    return False, delete_success, delete_failed
}

function remove_local_hidden() {
    if len(self.hidden_files):
        path.delete(self.hidden_files)
        log.info("Removed %d local hidden file(s) from disk", len(self.hidden_files))
    if len(self.hidden_folders):
        path.delete(self.hidden_folders)
        log.info("Removed %d local hidden folder(s) from disk", len(self.hidden_folders))
}

function remove_empty_dirs() {
    path.remove_empty_dirs(self.unionfs_fuse, 1)
    log.info("Removed empty directories from '%s'", self.unionfs_fuse)
}

# internals
function __files() {
    hidden_files = []
    try:
        hidden_files = path.find_files(self.unionfs_fuse, '_HIDDEN~')
        log.info("Found %d hidden files in %r", len(hidden_files), self.unionfs_fuse)
    except Exception:
        log.exception("Exception finding hidden files for %r: ", self.unionfs_fuse)
        hidden_files = None
    return hidden_files
}

function __folders() {
    hidden_folders = []
    try:
        hidden_folders = path.find_folders(self.unionfs_fuse, '_HIDDEN~')
        log.info("Found %d hidden folders in %r", len(hidden_folders), self.unionfs_fuse)
    except Exception:
        log.exception("Exception finding hidden folders for %r: ", self.unionfs_fuse)
        hidden_folders = None
    return hidden_folders
}

function __hidden2remote() {
    remote="$1"
    hidden_path="$2"
    try:
        remote_path = hidden_path.replace(self.unionfs_fuse, remote['hidden_remote']).rstrip('_HIDDEN~')
        log.debug("Mapped '%s' to '%s'", hidden_path, remote_path)
        return remote_path
    except Exception:
        log.exception("Exception mapping hidden file '%s' to its rclone remote path", hidden_path)
    return None
}

echo "Starting hidden cleaning"
hidden_remote_name = 'gd-crypt:'

# retrieve rclone config for this remote
hidden_remote_config = conf.configs['remotes'][hidden_remote_name]

# clean remote
clean_resp, deleted_ok, deleted_fail = clean_remote hidden_remote_name hidden_remote_config

# send notification
if deleted_ok or deleted_fail:
    notify.send(message="Cleaned %d hidden(s) with %d failure(s) from remote: %s" % (
        deleted_ok, deleted_fail, hidden_remote_name))

# remove the HIDDEN~ files from disk and empty directories from unionfs-fuse folder
remove_local_hidden
remove_empty_dirs

echo "Finished hidden cleaning"
