#!/bin/bash
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config

. "/usr/bin/variables"
##############################################################################

oldSize=0
movedSize=0

rm_time () {
    # Generate filelist and iterate through it...
    find "${UPLOAD_QUEUE}" -type f -mtime +$REMOVE_LOCAL_FILES_AFTER_DAYS | while read -r n; do

        # Find the pathname relative to the root of your remote and store filename
        filename="$(echo "$n" | sed -e s@"${UPLOAD_QUEUE}"@@)"
        destpath="$(dirname "$n" | sed -e s@"${UPLOAD_QUEUE}"@@)"

        # Skip hidden or partial files.
        case "$n" in
            (*.partial~) continue ;;
            (*_HIDDEN~) continue ;;
            (*.QTFS) continue ;;
            (*.unionfs-fuse*) continue ;;
            (*.DS_STORE) continue ;;
        esac

        # If file is opened by another process, wait until it isn't.
        while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
            [ "$(lsof "${UPLOAD_QUEUE}/${n}" >/dev/null 2>&1)" ] || \
            [ "$(lsof "${MOUNT_DIR}/${n}" >/dev/null 2>&1)" ]; do
            echo "File -> ${n} in use. Retrying in 10 seconds."
            sleep 10
        done

        fileSize=$(du -sb "$n" | awk '{print $1}')

        # Move file to remote destination[s], retaining path
        rclone move $rclone_options "$@" "$n" "${RCLONE_CLOUD_ENDPOINT}${destpath}" >/dev/null 2>&1
        
        movedSize=$((movedSize + fileSize))

        sizeInMb=$((movedSize / 1000 / 1000))
        diffSize=$((movedSize - oldSize))
        if [[ "${sizeInMb}" -gt 1000 ]]; then
            if [[ "${diffSize}" -gt "1000000000" ]]; then # greater than 1 GB
                oldSize=$movedSize
                echo "$((sizeInMb / 1000)) GB uploaded"
            fi
        elif [[ "${diffSize}" -gt "100000000" ]]; then # greater than 100 MB
            oldSize=$movedSize
            echo "${sizeInMb} MB uploaded"
        fi
    done

    find "${UPLOAD_QUEUE}" -mindepth 1 -type d -empty -delete
}

rm_instant () {
    # Generate filelist and iterate through it...
    find "${UPLOAD_QUEUE}" -type f | while read -r n; do

        # Find the pathname relative to the root of your remote and store filename
        filename="$(echo "$n" | sed -e s@"${UPLOAD_QUEUE}"@@)"
        destpath="$(dirname "$n" | sed -e s@"${UPLOAD_QUEUE}"@@)"

        # Skip hidden or partial files.
        case "$n" in
            (*.partial~) continue ;;
            (*_HIDDEN~) continue ;;
            (*.QTFS) continue ;;
            (*.unionfs-fuse*) continue ;;
            (*.DS_STORE) continue ;;
        esac

        # If file is opened by another process, wait until it isn't.
        while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
            [ "$(lsof "${UPLOAD_QUEUE}/${n}" >/dev/null 2>&1)" ] || \
            [ "$(lsof "${MOUNT_DIR}/${n}" >/dev/null 2>&1)" ]; do
            echo "File -> ${n} in use. Retrying in 10 seconds."
            sleep 10
        done

        fileSize=$(du -sb "$n" | awk '{print $1}')

        # Move file to remote destination[s], retaining path
        rclone move $rclone_options "$@" "$n" "${RCLONE_CLOUD_ENDPOINT}${destpath}" >/dev/null 2>&1
        
        movedSize=$((movedSize + fileSize))

        sizeInMb=$((movedSize / 1000 / 1000))
        diffSize=$((movedSize - oldSize))
        if [[ "${sizeInMb}" -gt 1000 ]]; then
            if [[ "${diffSize}" -gt "1000000000" ]]; then # greater than 1 GB
                oldSize=$movedSize
                echo "$((sizeInMb / 1000)) GB uploaded"
            fi
        elif [[ "${diffSize}" -gt "100000000" ]]; then # greater than 100 MB
            oldSize=$movedSize
            echo "${sizeInMb} MB uploaded"
        fi
    done

    find "${UPLOAD_QUEUE}" -mindepth 1 -type d -empty -delete
}

rm_space () {
    maxSize=$(($REMOVE_LOCAL_FILES_WHEN_SPACE_EXCEEDS_GB * 1000 * 1000 * 1000))
    currentSize="$(du -sb "$UPLOAD_QUEUE" | awk '{print $1}')"
    if [ "$maxSize" -gt "$currentSize" ]; then
        echo "Current size of $(($currentSize / 1000 / 1000 / 1000)) GB has not exceeded $REMOVE_LOCAL_FILES_WHEN_SPACE_EXCEEDS_GB GB"
        exit 02
    fi

    freeup=$(($FREEUP_ATLEAST_GB * 1000 * 1000 * 1000))

    find "${UPLOAD_QUEUE}" -type f -print0 | xargs -0 stat --format '%Y :%y %n' | sort -n | cut -d: -f2- | awk '{$1=$2=$3=""; print $0}' | while read -r n; do
        if [ "$movedSize" -gt "$freeup" ]; then
            spaceInGb=$(($movedSize / 1000 / 1000 / 1000))
            spaceLeft=$(($(du -sb "$UPLOAD_QUEUE" | awk '{print $1}') / 1000 / 1000 / 1000))
            echo "Removed ${spaceInGb} GB. Media in total ${spaceLeft} GB."
            break
        fi

        # Find the pathname relative to the rsoot of your remote and store filename
        filename="$(echo "$n" | sed -e s@"${UPLOAD_QUEUE}"@@)"
        destpath="$(dirname "$n" | sed -e s@"${UPLOAD_QUEUE}"@@)"

        # Skip hidden or partial files.
        case "$n" in
            (*.partial~) continue ;;
            (*_HIDDEN~) continue ;;
            (*.QTFS) continue ;;
            (*.fuse*) continue ;;
            (.DS_STORE) continue ;;
        esac

        # If file is opened by another process, wait until it isn't.
        while [ "$(lsof "$n" >/dev/null 2>&1)" ] || \
            [ "$(lsof "${UPLOAD_QUEUE}/${n}" >/dev/null 2>&1)" ] || \
            [ "$(lsof "${MOUNT_DIR}/${n}" >/dev/null 2>&1)" ]; do
            echo "File -> ${n} in use. Retrying in 10 seconds."
            sleep 10
        done

        fileSize=$(du -sb "$n" | awk '{print $1}')
        
        # Move file to remote destination[s], retaining path
        rclone move $rclone_options "$@" "$n" "${RCLONE_CLOUD_ENDPOINT}${destpath}" >/dev/null 2>&1
        
        movedSize=$((movedSize + fileSize))

        sizeInMb=$((movedSize / 1000 / 1000))
        diffSize=$((movedSize - oldSize))
        if [[ "${sizeInMb}" -gt 1000 ]]; then
            if [[ "${diffSize}" -gt "1000000000" ]]; then # greater than 1 GB
                oldSize=$movedSize
                echo "$((sizeInMb / 1000)) GB uploaded"
            fi
        elif [[ "${diffSize}" -gt "100000000" ]]; then # greater than 100 MB
            oldSize=$movedSize
            echo "${sizeInMb} MB uploaded"
        fi
    done

    find "${UPLOAD_QUEUE}" -mindepth 1 -type d -empty -delete
}

# If script is already running; abort.
if pidof -o %PPID -x "$(basename "$0")"; then
    echo "Upload already in progress. Aborting."
    exit 3
fi

if ! check; then
	echo "Invalid configuration. Aborting..."
	exit 1
fi

echo "Removing files based on ${REMOVE_LOCAL_FILES_BASED_ON}"

if [ "$REMOVE_LOCAL_FILES_BASED_ON" = "space" ]; then
    rm_space
elif [ "$REMOVE_LOCAL_FILES_BASED_ON" = "time" ]; then
    rm_time
elif [ "$REMOVE_LOCAL_FILES_BASED_ON" = "instant" ]; then
    rm_instant
else
    echo "no option to remove old files"
    exit 02
fi
